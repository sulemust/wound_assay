import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from skimage import io
from skimage.registration import optical_flow_tvl1
from skimage.registration import optical_flow_ilk


def normalize(x):
  return (x - x.min()) / (x.max() - x.min())

if __name__ == '__main__':

  # parameters
  dir_in_name = '/home/campus.ncl.ac.uk/nsm368/Documents/Repo/3D_processing/scratch_wound/in/'
  dir_out_name = '/home/campus.ncl.ac.uk/nsm368/Documents/Repo/3D_processing/scratch_wound/out/'

  # variables
  names = []
  ims = []
  imfxs = []
  imfys = []

  # list files
  im_files = [f for f in os.listdir(dir_in_name) if f.endswith('.tif')]

  # read image
  for i in im_files:
    im = io.imread(os.path.join(dir_in_name, i))
    im = np.moveaxis(im, 0, -1)  # [z,x,y] -> [x,y,z]
    #im = im[:,0:400,0:47]
    im = im[:,:,0:79] # 19, 39, 59, 79
    ims.append(im)
    names.append(i)

  for i in range(0, len(ims)):
    #i = 0
    print(names[i])
    # normalize
    im = normalize(ims[i])
    # compute the optical flow
    imfxt = np.zeros_like(im, shape=[im.shape[0],im.shape[1],im.shape[2]-1])
    imfyt = np.zeros_like(im, shape=[im.shape[0],im.shape[1],im.shape[2]-1])
    for j in range(im.shape[2]-1):
      print(str(im.shape[2]-1) + ': ' + str(j))
      #imfy, imfx = optical_flow_tvl1(im[:,:,j], im[:,:,j+1])
      imfy, imfx = optical_flow_ilk(im[:,:,j], im[:,:,j+1])
      imm = np.hypot(imfx, imfy) # magnitude
      imfxt[:,:,j] = imfx
      imfyt[:,:,j] = imfy

    # mean magnitude
    imfxm = np.mean(imfxt, axis=2)
    imfym = np.mean(imfyt, axis=2)
    imfxs.append(imfxm)
    imfys.append(imfym)

    imfxs_avg = np.asarray(imfxs, dtype=object)
    imfys_avg = np.asarray(imfys, dtype=object)

    imfxs_avg = np.mean(imfxs_avg)
    imfys_avg = np.mean(imfys_avg)

    imfx_avg=imfxm
    imfy_avg=imfym

  # plot
  nvec = 20  # number of vectors to be displayed along each image dimension
  nl, nc = imfxm.shape
  step = max(nl//nvec, nc//nvec)
  y, x = np.mgrid[:nl:step, :nc:step]
  for i in range(0,1):
    imfxm = imfxs_avg
    imfym = imfys_avg
    u_ = imfx_avg[::step, ::step]
    v_ = imfy_avg[::step, ::step]
    plt.figure(i+1)
    plt.imshow(np.mean(im, axis=2),cmap='gray' )
    plt.title(names[i])
    plt.quiver(x, y, u_, v_, color='r', units='dots', 
            angles='xy', scale_units='xy', lw=10, width=2)
    plt.savefig(os.path.join(dir_out_name, names[i].replace('.tif','_avg_orien_4.png')),bbox_inches='tight')
  plt.show()
