import os
import numpy as np
import matplotlib.pyplot as plt
import math
from skimage import io
from skimage.registration import optical_flow_tvl1
from skimage.registration import optical_flow_ilk
from numpy import arccos, array

def normalize(x):
    return (x - x.min()) / (x.max() - x.min())

# function to compute angle of a vector
def theta(v, w):
    # return arccos(v.dot(w)/(norm(v)*norm(w)))
    return (np.math.atan2(np.linalg.det([v, w]), np.dot(v, w)))

# function to compute magnitude of a vector
def magnitude(vector):
    return math.sqrt(sum(pow(element, 2) for element in vector))

# function to normalize angle 0 to 360 for negatives between -pi and pi
def normalize_angle_positive(angle):
    if angle < 0:
        return angle % 360
    return angle

# last frame
fr = 9

if __name__ == '__main__':

    # parameters
    dir_in_name = '/home/campus.ncl.ac.uk/nsm368/Documents/Repo/3D_processing/scratch_wound/in/'
    dir_out_name = '/home/campus.ncl.ac.uk/nsm368/Documents/Repo/3D_processing/scratch_wound/out/'

    # variables
    names = []
    ims = []
    imfxs = []
    imfys = []

    # list files
    im_files = [f for f in os.listdir(dir_in_name) if f.endswith('.tif')]

    # read image
    for i in im_files:
      im = io.imread(os.path.join(dir_in_name, i))
      im = np.moveaxis(im, 0, -1)  # [z,x,y] -> [x,y,z]
      # im = im[:,0:400,0:47]

      
      im = im[:, :, 0:fr]  # 19, 39, 59, 79
      ims.append(im)
      names.append(i)

    for i in range(0, len(ims)):
        # i = 0
        print(names[i])
        # normalize
        im = normalize(ims[i])
        # compute the optical flow
        imfxt = np.zeros_like(im, shape=[im.shape[0],im.shape[1],im.shape[2]-1])
        imfyt = np.zeros_like(im, shape=[im.shape[0],im.shape[1],im.shape[2]-1])
        for j in range(im.shape[2]-1):
          print(str(im.shape[2]-1) + ': ' + str(j))
          #imfy, imfx = optical_flow_tvl1(im[:,:,j], im[:,:,j+1])
          imfy, imfx = optical_flow_ilk(im[:, :, j], im[:, :, j+1])
          imm = np.hypot(imfx, imfy)  # magnitude
          imfxt[:, :, j] = imfx
          imfyt[:, :, j] = imfy

        # mean magnitude
        imfxm = np.mean(imfxt, axis=2)
        imfym = np.mean(imfyt, axis=2)
        imfxs.append(imfxm)
        imfys.append(imfym)

        # plot
        nvec = 20  # number of vectors to be displayed along each image dimension
        nl, nc = imfxm.shape
        step = max(nl//nvec, nc//nvec)
        y, x = np.mgrid[:nl:step, :nc:step]
        for i in range(0, len(imfxs)):
            imfxm = imfxs[i]
            imfym = imfys[i]
            u_ = imfxm[::step, ::step]
            v_ = imfym[::step, ::step]
            plt.figure(i+1)
            plt.imshow(np.mean(im, axis=2), cmap='gray')
            plt.title(names[i])
            plt.quiver(x, y, u_, v_, color='r', units='dots',
                    angles='xy', scale_units='xy', lw=10, width=2)
            plt.savefig(os.path.join(dir_out_name, names[i].replace('.tif','_orien_1_q'+str(fr)+'.png')),
                        bbox_inches='tight')
            #plt.show()

        angles = []
        for k in range(0, len(u_)):
          for l in range (0, len(v_)):
            #array for measuring angle
            arr = np.asarray([u_[l][k], v_[l][k]])
            #compute magnitude of vector and remove zeros
            if magnitude(arr) != 0:
                # using base vector o [1,0]
                base = array([1, 0])
                # angle between vectors and convert angles from radians to degrees
                angle = np.degrees(theta(base, arr))
                # normalize angles from -pi and pi to 0 and 360
                angle = normalize_angle_positive(angle)
                angles.append(angle)
        print("Angle values :", angles)

        #   plt.rcParams["figure.figsize"] = [7.00, 3.50]
        #   plt.rcParams["figure.autolayout"] = True
        #   plt.title(names[0])
        #   width = np.pi / 16
        #   ax = plt.subplot(111, projection='polar')
        #   bars = ax.bar(angles, radii, width=width, color='blue')
        # for r, bar in zip(radii, bars):
        #   bar.set_alpha(0.5)
        #   plt.savefig(str(names)+"_circular_histogram_1.png")
        # plt.show()
        # number of bins for histogram
        bin_size = 15
        # histogram normalized
        a , b = np.histogram(angles, bins=np.arange(0, 360+bin_size, bin_size), 
                              density=True)
        # number of occurrence of the angles in each bin
        centers = np.deg2rad(np.ediff1d(b)//2 + b[:-1])
        # plot polar histogram
        fig = plt.figure(figsize=(8, 6))
        ax = fig.add_subplot(111, projection='polar')
        ax.bar(centers, a, width=np.deg2rad(bin_size), bottom=0.0,
                align='center', color='.6', edgecolor='k')
        # set 0 on east of polar axis
        ax.set_theta_zero_location("E")
        # set angles anti-clockwise
        ax.set_theta_direction(1)
        min_ylim = 0
        max_ylim = 0.014
        ax.set_ylim(min_ylim, max_ylim)
        plt.title(names[i])
        # plt.savefig(str(names[i])+"_polar_hist.png", bbox_inches='tight')
        plt.savefig(os.path.join(dir_out_name, names[i].replace('.tif','_polar_hist_q'+str(fr)+'.png')),bbox_inches='tight')
        plt.show()
